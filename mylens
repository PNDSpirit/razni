#!/bin/bash

# ====================================================
# Enhanced OCR Screenshot Script with Fixes
# ====================================================

# Configuration
OCR_LANG="eng+bul"               # Languages for Tesseract
CLIPBOARD_TOOL="xsel"            # Clipboard tool: xsel, xclip, wl-copy
NOTIFY_SUCCESS=true              # Enable success notifications
NOTIFY_ERROR=true                # Enable error notifications
TMP_PREFIX="ocr_screenshot_"     # Prefix for temporary files
DEBUG=true                       # Enable debug mode

# Set DISPLAY and XAUTHORITY
export DISPLAY=${DISPLAY:-:0}
export XAUTHORITY=${XAUTHORITY:-$HOME/.Xauthority}

# Function to display error messages and exit
error_exit() {
    local msg="$1"
    if [ "$NOTIFY_ERROR" = true ]; then
        notify-send "OCR Screenshot Error" "$msg" --icon=dialog-error
    else
        echo "Error: $msg" >&2
    fi
    exit 1
}

# Function to send success notifications
send_notification() {
    if [ "$NOTIFY_SUCCESS" = true ]; then
        notify-send "OCR Screenshot" "Text copied to clipboard." --icon=dialog-information
    fi
}

# Function to log debug messages
log_debug() {
    if [ "$DEBUG" = true ]; then
        echo "[DEBUG] $1"
    fi
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to determine the clipboard tool
determine_clipboard_tool() {
    if [ "$CLIPBOARD_TOOL" = "auto" ]; then
        if command_exists wl-copy; then
            CLIPBOARD_TOOL="wl-copy"
        elif command_exists xclip; then
            CLIPBOARD_TOOL="xclip"
        elif command_exists xsel; then
            CLIPBOARD_TOOL="xsel"
        else
            error_exit "No clipboard tool found. Install wl-copy, xclip, or xsel."
        fi
    else
        if ! command_exists "$CLIPBOARD_TOOL"; then
            error_exit "Specified clipboard tool '$CLIPBOARD_TOOL' is not installed."
        fi
    fi
}

# Function to check all dependencies
check_dependencies() {
    log_debug "Checking dependencies..."

    # Check for screenshot tool
    if command_exists scrot; then
        SCREENSHOT_TOOL="scrot"
    elif command_exists grim && command_exists slurp; then
        SCREENSHOT_TOOL="grim"
    else
        error_exit "No screenshot tool found. Install scrot for X11 or grim & slurp for Wayland."
    fi

    # Check for ImageMagick
    if ! command_exists convert; then
        error_exit "ImageMagick is not installed. Install it with your package manager."
    fi

    # Check for Tesseract
    if ! command_exists tesseract; then
        error_exit "Tesseract OCR is not installed. Install it with your package manager."
    fi

    # Check for clipboard tool
    determine_clipboard_tool

    # Check for notify-send
    if [ "$NOTIFY_SUCCESS" = true ] || [ "$NOTIFY_ERROR" = true ]; then
        if ! command_exists notify-send; then
            echo "Warning: notify-send not found. Notifications will be disabled."
            NOTIFY_SUCCESS=false
            NOTIFY_ERROR=false
        fi
    fi

    log_debug "All dependencies are satisfied."
}

# Function to take a screenshot
take_screenshot() {
    TMP_IMG=$(mktemp --suffix=.png /tmp/${TMP_PREFIX}XXXXXX) || error_exit "Failed to create temporary image file."
    log_debug "Temporary image file path: $TMP_IMG"

    if [ "$SCREENSHOT_TOOL" = "scrot" ]; then
        log_debug "Using scrot to take screenshot."
        # Remove the temporary file if it exists
        rm -f "$TMP_IMG"
        # Use '--' to ensure scrot treats the filename literally
        xdotool mousemove_relative 0 0
        sleep 0.3
        scrot -s -q 100 -- "$TMP_IMG" 2> /tmp/scrot_error.log
        SCROT_EXIT_STATUS=$?
        if [ $SCROT_EXIT_STATUS -ne 0 ]; then
            SCROT_ERROR_MSG=$(cat /tmp/scrot_error.log)
            error_exit "Failed to take screenshot with scrot. Error: $SCROT_ERROR_MSG"
        fi
    elif [ "$SCREENSHOT_TOOL" = "grim" ]; then
        log_debug "Using grim and slurp to take screenshot."
        SLURP_AREA=$(slurp 2> /tmp/slurp_error.log) || { rm -f "$TMP_IMG"; error_exit "Failed to select area with slurp. Check /tmp/slurp_error.log for details."; }
        grim -g "$SLURP_AREA" "$TMP_IMG" 2> /tmp/grim_error.log || { rm -f "$TMP_IMG"; error_exit "Failed to take screenshot with grim. Check /tmp/grim_error.log for details."; }
    fi

    # Verify that the screenshot was taken successfully
    if [ ! -s "$TMP_IMG" ]; then
        error_exit "Screenshot file is empty or invalid."
    fi

    log_debug "Screenshot captured successfully at $TMP_IMG."
}

# Function to process the image for OCR
process_image() {
    log_debug "Processing image for OCR..."

    # Increase image size to improve OCR accuracy
    convert "$TMP_IMG" -resize 300% "$TMP_IMG"

    # Convert to grayscale
    convert "$TMP_IMG" -colorspace Gray "$TMP_IMG"

    # Apply adaptive thresholding
    convert "$TMP_IMG" -adaptive-threshold 8x8+16% "$TMP_IMG"

    log_debug "Image processing completed with resizing and adaptive thresholding."
}


# Function to perform OCR
perform_ocr() {
    log_debug "Performing OCR on the image..."

    OCR_OUTPUT=$(mktemp /tmp/${TMP_PREFIX}XXXX.txt) || error_exit "Failed to create temporary OCR output file."

    # Try different psm modes
    tesseract "$TMP_IMG" "${OCR_OUTPUT%.txt}" -l "$OCR_LANG" --oem 1 --psm 6 >/dev/null 2>&1 || { rm -f "$TMP_IMG" "$OCR_OUTPUT"; error_exit "Tesseract OCR failed."; }

    # Read the OCR result
    OCR_TEXT=$(cat "${OCR_OUTPUT}") || { rm -f "$TMP_IMG" "$OCR_OUTPUT"; error_exit "Failed to read OCR output."; }

    # Optional: Post-processing corrections
    OCR_TEXT=$(echo "$OCR_TEXT" | sed 's/medel/model/g; s/4o/4.0/g')

    log_debug "OCR completed successfully."
}

# Function to copy text to clipboard
copy_to_clipboard() {
    log_debug "Copying text to clipboard using $CLIPBOARD_TOOL..."

    case "$CLIPBOARD_TOOL" in
        wl-copy)
            echo "$OCR_TEXT" | wl-copy || error_exit "Failed to copy text to clipboard with wl-copy."
            ;;
        xclip)
            echo "$OCR_TEXT" | xclip -selection clipboard || error_exit "Failed to copy text to clipboard with xclip."
            ;;
        xsel)
            echo "$OCR_TEXT" | xsel --clipboard --input || error_exit "Failed to copy text to clipboard with xsel."
            ;;
        *)
            error_exit "Unsupported clipboard tool: $CLIPBOARD_TOOL"
            ;;
    esac

    log_debug "Text copied to clipboard successfully."
}

# Function to clean up temporary files
cleanup() {
    log_debug "Cleaning up temporary files..."
    rm -f "$TMP_IMG" /tmp/scrot_error.log /tmp/slurp_error.log /tmp/grim_error.log "$OCR_OUTPUT"
}

# Main Function
main() {
    check_dependencies
    take_screenshot
    process_image
    perform_ocr
    copy_to_clipboard
    send_notification
}

# Execute the main function
main

# Ensure cleanup happens on script exit
trap cleanup EXIT

exit 0
